name: "CI and Release"

# 1) Trigger on any push to `main`
on:
  push:
    branches:
      - main

jobs:
  check:
    name: Lint ¬∑ Format ¬∑ Test
    runs-on: ubuntu-latest

    steps:
      # 1.1) Check out your code with full history (needed for tagging later)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 1.2) Install Nix (with flakes enabled)
      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # 1.3) Inside `nix develop`, run fmt, clippy, and tests
      - name: Run formatter, linter, and tests
        run: |
          nix develop --command bash -lc '
            echo "üîç Checking cargo fmt..."
            cargo fmt -- --check

            echo "üîç Running cargo clippy..."
            cargo clippy --all-targets --all-features -- -D warnings

            echo "üîç Running cargo test..."
            cargo test --all
          '

  release:
    name: Build ¬∑ Tag ¬∑ Release
    needs: check
    runs-on: ubuntu-latest

    steps:
      # 2.1) Check out your code again (fresh workspace for release)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2.2) Install Nix
      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # 2.3) Build the `crosskey` binary via Nix flakes (result ‚Üí ./result)
      - name: Build crosskey via Nix
        run: |
          nix build .#crosskey

      # 2.4) Extract the version number from the flake
      #      (this reads: `0.1.0` for example)
      - name: Get crate version
        id: get_version
        run: |
          VERSION=$(nix eval --raw .#packages.x86_64-linux.crosskey.version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 2.5) Create a new git tag like ‚Äúv0.1.0‚Äù and push it back to origin
      - name: Create and push git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Release v${{ steps.get_version.outputs.version }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      # 2.6) Create a GitHub Release based on that newly‚Äêcreated tag
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          name: "Release v${{ steps.get_version.outputs.version }}"
          body: |
            This release was autogenerated from a push to `main` at commit ${{ github.sha }}.
            It corresponds exactly to version **v${{ steps.get_version.outputs.version }}** in Cargo.toml.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 2.7) Upload the compiled binary (`./result/bin/crosskey`) as a Release asset
      - name: Upload Release asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            result/bin/crosskey
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
