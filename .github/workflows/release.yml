name: "build-and-release"

# Trigger only when a tag like “vX.Y.Z” is pushed
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build for ${{ matrix.system }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            system: x86_64-linux
          - os: macos-latest
            system: x86_64-darwin


    outputs:
      artifact-name: crosskey-${{ matrix.system }}

    steps:
      # 1) Check out the tag
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) Restore Nix cache so that nix build reuses narfiles/build outputs
      - name: Cache Nix downloads
        uses: actions/cache@v3
        with:
          path: ~/.cache/nix
          key: ${{ runner.os }}-nix-${{ hashFiles('**/flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      # 3) Install Nix (flakes enabled)
      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # 4) Build the `crosskey` binary via your flake
      - name: Build crosskey (${{ matrix.system }})
        run: |
          nix build ".#packages.${{ matrix.system }}.crosskey"

      # 5) Copy the compiled binary into a system‐named folder
      - name: Copy artifact to folder
        run: |
          mkdir -p artifacts/${{ matrix.system }}
          cp result/bin/crosskey artifacts/${{ matrix.system }}/

      # 6) Upload that single‐system binary as an artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: crosskey-${{ matrix.system }}
          path: artifacts/${{ matrix.system }}/crosskey

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1) Download Linux build (artifact) from the build matrix
      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: crosskey-x86_64-linux
          path: downloaded/

      # 2) Download macOS build
      - name: Download macOS build
        uses: actions/download-artifact@v4
        with:
          name: crosskey-x86_64-darwin
          path: downloaded/

      # 4) Create a GitHub Release using the pushed tag (e.g. “v1.2.3”)
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            This release was autogenerated by GitHub Actions on tag ${{ github.ref_name }}.
            It includes crosskey binaries for Linux, macOS, and Windows.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5) Upload all three binaries as assets to that Release
      - name: Upload Release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            downloaded/crosskey-x86_64-linux/crosskey
            downloaded/crosskey-x86_64-darwin/crosskey
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
