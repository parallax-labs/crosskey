# .github/workflows/ci-and-release.yml
name: "CI and Release"

# Trigger this workflow on every push to 'main'
on:
  push:
    branches:
      - main

jobs:
  check:
    name: Lint ¬∑ Format ¬∑ Test
    runs-on: ubuntu-latest

    steps:
      # 1) Check out your repo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Install Nix (with flakes enabled)
      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          # (optional) you can pin to a specific Nix version, but 
          # the default works fine. We need flakes enabled anyway.
          nix_path: nixpkgs=channel:nixos-unstable

      # 3) Run `nix develop --command ...` to check formatting, lint, and test
      - name: Run formatter, linter, and tests
        run: |
          # Inside `nix develop`, we have:
          #   - rustfmt   ‚Üí for `cargo fmt -- --check`
          #   - clippy    ‚Üí for `cargo clippy`
          #   - cargo     ‚Üí for `cargo test`

          nix develop --command bash -lc '
            echo "üîç Checking `cargo fmt`..."
            cargo fmt -- --check

            echo "üîç Running `cargo clippy`..."
            cargo clippy --all-targets --all-features -- -D warnings

            echo "üîç Running `cargo test`..."
            cargo test --all
          '

  release:
    name: Build & Create Release
    needs: check
    runs-on: ubuntu-latest

    steps:
      # 1) Check out your repo again (fresh copy for this job)
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Install Nix
      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # 3) Build the `crosskey` binary via flakes
      - name: Build crosskey via Nix
        run: |
          # This produces a ./result symlink pointing to the built output.
          nix build .#crosskey

      # 4) Create a GitHub Release (using the commit SHA as the ‚Äútag‚Äù)
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # We use the short commit SHA as the tag name. 
          # You can change this to any scheme you like.
          tag_name: ${{ github.sha }}
          name: "Release ${{ github.sha }}"
          body: |
            This release was autogenerated from a push to `main` at commit ${{ github.sha }}.
            It contains the `crosskey` binary built via Nix Flakes.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5) Upload the `crosskey` binary as an asset on that Release
      - name: Upload Release asset
        uses: softprops/action-gh-release@v1
        with:
          # The built binary lives at `./result/bin/crosskey`
          files: |
            result/bin/crosskey
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
