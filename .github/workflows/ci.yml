name: "CI and Release"

# Trigger on any push to `main`
on:
  push:
    branches:
      - main

jobs:
  check:
    name: Lint · Format · Test
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the repo (we need full history for caching by flake.lock)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) Restore Nix cache (nar/downloads, build results)
      - name: Cache Nix downloads
        uses: actions/cache@v3
        with:
          # Only caching ~/.cache/nix (don’t attempt to cache /nix/store itself – too large).
          path: ~/.cache/nix
          key: ${{ runner.os }}-nix-${{ hashFiles('**/flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      # 3) Install Nix (flakes enabled)
      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # 4) Run formatting, lint, and tests inside nix develop
      - name: Run formatter, linter, and tests
        run: |
          nix develop --command bash -lc '
            echo "🔍 Checking cargo fmt..."
            cargo fmt -- --check

            echo "🔍 Running cargo clippy..."
            cargo clippy --all-targets --all-features -- -D warnings

            echo "🔍 Running cargo test..."
            cargo test --all
          '

  release:
    name: Build · Tag · Release
    needs: check
    runs-on: ubuntu-latest

    steps:
      # 1) Check out the repo (fresh workspace)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2) Restore Nix cache (nar/downloads, build results)
      - name: Cache Nix downloads
        uses: actions/cache@v3
        with:
          path: ~/.cache/nix
          key: ${{ runner.os }}-nix-${{ hashFiles('**/flake.lock') }}
          restore-keys: |
            ${{ runner.os }}-nix-

      # 3) Install Nix (flakes enabled)
      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # 4) Build `crosskey` via Nix flakes (populates ./result)
      - name: Build crosskey via Nix
        run: |
          nix build .#crosskey

      # 5) Extract the version from the flake (e.g. "0.1.0")
      - name: Get crate version
        id: get_version
        run: |
          VERSION=$(nix eval --raw .#packages.x86_64-linux.crosskey.version)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # 6) Create and push a semver tag (vX.Y.Z) matching Cargo.toml
      - name: Create and push git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          TAG="v${{ steps.get_version.outputs.version }}"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      # 7) Create a GitHub Release for that tag
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          name: "Release v${{ steps.get_version.outputs.version }}"
          body: |
            This release was autogenerated from a push to `main` at commit ${{ github.sha }}.
            It matches **v${{ steps.get_version.outputs.version }}** in Cargo.toml.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 8) Upload the compiled binary (`./result/bin/crosskey`) as a Release asset
      - name: Upload Release asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            result/bin/crosskey
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
