name: "build‐and‐release"

on:
  push:
    # Trigger only when a new tag is pushed (assumes tags look like "vX.Y.Z")
    tags:
      - 'v*.*.*'

jobs:
  build:
    # We will run the same steps on different runners / systems.
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            system: x86_64-linux
          - os: macos-latest
            system: x86_64-darwin
          - os: ubuntu-latest   # Linux runner but cross‐build for Windows
            system: x86_64-windows

    # Use matrix.os as the runner.
    runs-on: ${{ matrix.os }}

    outputs:
      # Expose the “artifact name” so the “release” job can refer to it.
      artifact-name: crosskey-${{ matrix.system }}

    steps:
      # 1) Check out your repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Install Nix (using cachix/install-nix-action, which supports Linux + macOS).
      #    On a Linux runner, we’ll also use it to cross‐compile for Windows.
      - name: Install Nix
        uses: cachix/install-nix-action@v15
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      # 3) Build the ‘crosskey’ binary via your flake.
      #    We refer to the flake output under “packages.<system>.crosskey”.
      - name: Build crosskey (${{ matrix.system }})
        run: |
          # Build into a local “result” symlink.  If you want to avoid linking,
          # use “--no-link” and refer to "result" by reading the symlink, but
          # the default “nix build .#…” creates ./result.
          nix build ".#packages.${{ matrix.system }}.crosskey"

      # 4) Place the compiled binary into a folder named after the target system,
      #    so that uploading is unambiguous.
      - name: Copy artifact to folder
        run: |
          mkdir -p artifacts/${{ matrix.system }}
          # The flake always puts the executable at result/bin/crosskey
          cp result/bin/crosskey artifacts/${{ matrix.system }}/

      # 5) Upload “artifacts/<system>/crosskey” as a GitHub Action artifact.
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: crosskey-${{ matrix.system }}
          path: artifacts/${{ matrix.system }}/crosskey

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # 1) Download the Linux binary
      - name: Download Linux build
        uses: actions/download-artifact@v3
        with:
          name: crosskey-x86_64-linux
          path: downloaded/

      # 2) Download the macOS binary
      - name: Download macOS build
        uses: actions/download-artifact@v3
        with:
          name: crosskey-x86_64-darwin
          path: downloaded/

      # 3) Download the Windows binary (cross-compiled on Linux)
      - name: Download Windows build
        uses: actions/download-artifact@v3
        with:
          name: crosskey-x86_64-windows
          path: downloaded/

      # 4) Create a new GitHub Release, using the tag name that triggered this workflow
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}          # e.g. “v1.2.3”
          name: Release ${{ github.ref_name }}      # e.g. “Release v1.2.3”
          body: |
            This release was autogenerated by GitHub Actions.
            It includes crosskey binaries for Linux, macOS, and Windows.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5) Upload all three binaries as assets on that Release
      - name: Upload Release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            downloaded/crosskey-x86_64-linux/crosskey
            downloaded/crosskey-x86_64-darwin/crosskey
            downloaded/crosskey-x86_64-windows/crosskey
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
